스프링이란		
			기업을 대상으로 하는개발을말함
                                 ↗
*자바 엔터프라이즈개발( Java EE ) 을 편하게 해주는  
 오픈소스 경량급 애플리케이션 프레임워크

-----------
 Java EE  - 자바로 뭔가만들기위해 필요한 스펙들을 모아놓은것(c/s,웹환경,디비,분산환경등)
 
 라이브러리- 로직은우리가 대부분다만들고 라이브러리를이용해서 필요한부분채움 
 프레임워크 - 로직을대부분 만들어놔둠, 우리가 우리의비즈니스에 맞게 끼워맞추면됨
	     끼워맞추는 부분 = 인터페이스로 만들어놓겠지   (테디베어-눈깔)
	     여기서.로직 : 어떤기능을하기위해 필요한 사전작업(커넥션열고 닫고 ,뭐 불러오고 등등 중복된것들)
  
 EJB - 엔터프라이즈 자바 빈(bean) : Object를 javaEE에서 빈이라함 (ex: DAO)
 			↘
			  분산객체지원  
      
 WAS[톰캣] - Servlet객체를관리 ( 우리가 new Servlet이딴거안하잔아 톰캣이 해주지 )
 
        * 나머지 객체들(EJB) = bean(관리가힘들다 - 개발자가 관리에 시간다쏟음)
        * EJB 컨테이너 = 얘가 관리해줌 (근데 지랄맞아서 스프링을쓰지)		
	      
        객체관리 - 객체생성과 그객체가의존하고있는 다른객체생성, 생성된객체세팅등등..
    	          즉 라이프사이클을관리
		*자바는 많은 클래스로 동작하고 클래스들이 얽혀있다. - 특정클래스쓸려면 세팅이필요함 - 귀찮
									= 그래서 객체관리컨테이너필요	    
		
       (톰캣은- 서블릿만 ,제우스같은건 - EJB컨테이너역할까지 같이 한다.)

       *그래서 객체관리는 알아서해줄테니 로직에만 신경써라! - 스프링임        			    
        서블릿+jsp(모델2) = 를 쉽게해주는거임 걍

------------------------------------------------------------------------
스프링이란 

 * 그림  

		    [ 비즈니스객체들 ㅂㅂㅂㅂ...]
		  ↗
 어플리케이션| 프레임워크가 필요한애들 
 		↑    ↖
                     web    DB  .. test .. 등등             		  *ex) 
          *            ↑        ↖            ↖  	    *		    Web에서
          *     actionfactory    ㅁㅁㅁ      ㅇㅇㅇ 	    *                  => action MVC객체가 스프링컨테이너안에있으면 
          *	    action 			    *  		    Spring MVC 를쓰는거지?  근데 이렇게잘안하지 
          ***********************************************                       action말고(이건 우리가만든거자나)
설정파일 ↗						    따로 Spring MVC를 제공해줌 그객체들(action같은)이 
			↓				    스프링컨테이너에 있는거지
	  
     Spring(어플리케이션 프레임워크) : 컨테이너임( 안에있는 객체를 bean이라고 부름 )
							  →스펙이있지만 걍 부름

   !) 웹,DB,test등에는 프레임워크가필요하다 -  각프레임워크를만들고 그프레임워크를 구성하는클래스가 존재
   !) 각프레임워크로 무언가만듬 = 비즈니스객체들이 생기고 각프레임워크가 그걸관리하겠지
   !) Spring은 프레임워크를 구성하는 객체를 관리해주는 컨테이너임
   !) 스프링이 프레임워크객체관리 = 결국 비즈니스객체를관리하는 프레임워크도 스프링안에있으니 
   !) 스프링이 다해줌!  				  
   !) 결국은 비즈니스객체만 로직작성하면됨 
   
   !)스프링컨테이너가 스프링설정파일하나를 읽어서 bean객체를 만듬 = 이설정파일을 우리가 잘 작성해야함  
      						       만들면서 의존성관리도해줌
 심화   ▼
     	
   Spring MVC, Spring DAO,  Springsecurity,  Spring orm .. 등등  많음 : ***action대신 (Spring MVC) 제데로된걸 쓰는거지 제공되는걸
         ↓		↓		↓	↓        
 *					        *   // 팩토리패턴씀    => bean Factory : new를 스프링이해줌 
 *       ㅁ            ㅇ                    ㅂ           ㄴ     *          	           => DI container  : 의존성관리알아서해줌 
 **********************************************************		           => IoC container : 제어권이 스프링한테있음 
  	            스프링 컨테이너				           => 스프링 코어라고도하고							
 또 
 어플리케이션 컨텍스트라고도함 = 왜? bean들이 메소드실행시 다른객체가서 또 메소드실행하고.. = 프로그래밍
 		                 = 즉 어플리케이션에 대한정보(메소드,객체)들이 다있으니 

 *톰캣한테 어플리케이션 컨텍스트는 = 서블릿이지 
			↕
                            스프링에서는 = bean

-----------

그외

  EJB 컨테이너 = 스펙에 setter getter하라는이유?
                     빈관리 할때 의존성 해결위해 세팅을해줘야하니깐 세터게터가있어야 세팅을해주지
  근데 스프링에서는 스펙을 좀 느슨하게 지켜도됨  DI 때문에

  쨋든 = 서블릿은 톰캣이 나머지 프레임워크객체들관리는 스프링이! 	     
           우리는? 비즈니스객체만구현!  
---------------------------------------------------
 
 POJO : 스프링컨테이너안에있는 객체 : 비즈니스코드만 남겨놓겠다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   
  스프링자체는 코드가좀 있지만 스프링컨테이너는 복잡X => 스프링이관리하는객체는 POJO이기 때문  
  POJO : EJB는 매여있다. 뭐 예를들면 관련은없지만 .. 1) 서블릿은 톰캣 http서블릿을 상속받으니 톰캣이랑 따라다녀야하고 .. 뭐이런거?
					      2) (DAO에 JDBC가 들어왔있기때문에 복잡해지는거다. =바깥으로 빼!)
           특정클래스를 상속하거나 인터페이스를 구현하지 않는 평범한 자바 클래스(느슨)
           플랫폼기술에 매여있지 않다. (하지만 EJB의 고급기술은 다된다. 개꿀띠)

 *   비즈니스에서는 당연히 인터페이스나 상속필요할수있지 근데 스프링자체는 필요가없다는것이다.         


  POJO 프로그래밍 {
		  DI (디펜던시 인젝션)  = 의존성 해결,	      
    		  IoC  = 객체제어권이 스프링으로넘어간다. 우리가 직접new를 이용해서 사용X 
		  AOP = OOP를 좀더 잘할수있게해줌 비즈니스에 집중할수있게해주는 개념  
		  PSA  = 이식성이 좋은 서비스개발(인터페이스(설정파일))
		    ↘
		       *설정파일 읽고 DI로 의존성을해결해서 주입해주는데
		        주입하는걸 바꿔줄려면 코드를 수정해야함 = 코드수정은 좋지않다.
		        :인터페이스를 이용하여 그걸 구현하도록하면 주입하는걸 쉽게바꿀수있다.
  }

 AOP - 관심있는 프로그래밍 : 즉 crud에 관점이 맞춰있으면 그것만있어야지 : 탬플릿콜백패턴으로처리하면됨? 
      			ex) Dao보면 = 1)연결 2) 트라이캐치 3) crud 4)자원정리 ... :  비즈니스에서는 crud만중요함 
							 ↓	
                                 					관심(core)

			  (연결,예외, 이런것들을바깥에 빼서 모듈로만들어줌)
			   프락시를 이용해서 연결시켜서 실행해줌 - 시점마다 모듈을 끼워넣을수있다.
			   실제로 DAO를 깔끔하게 해주는건 템플릿패턴으로 해줌 
			   (메소드시점 타겟팅 잡아서 모듈매핑?? 코드도없는데 실행??어캐?
 			   바깥에 빠진 타이머가지고 메소드시점잡아서 매핑함) 
				
			   다른라이브러리는 로그남는게 다른곳이라서 이럴떈 AOP써서한다..?	 					  	
			  
 			  또 보안(접근제어) 부분빼는건 인터셉터나 필터씀 
                                      즉, 빼내는건 여러가지 방법이있다.

-------------




02/19 - 화 - 3장
02/20 - 수 - ?
02/21-  목 - 마이바티스  4,5
02/22 - 금 - http세션이 아직묶여있어서 이걸 걷어내야함. 6,8
	  - 6장 : SLF4J?
	    세션 :@Auth ,@AuthUser  , write(@AuthUser UserVo authUser)
				           httpsession 대신 이렇게쓰면 알아서 넣어줌 세션을
	    ex)접근제한자 인터셉터?
	       writeform = 이런곳에도 세션이필요하지	      
		*핵심관심은 다른곳인데(글쓰기, 글수정,로그아웃) 
		보안관련은 어플리케이션과 뭉쳐있지 않아야한다. 시스템 바깥으로다뺴야됨
		보안관련코드는 모듈로 분리한다. - 
					Aop로 뺴내던가(x) 
					필터,어노테이션으로뺴던가
					
월 - 7 
화 - 9 
수 - 10
      11
목 - JBlog?




 