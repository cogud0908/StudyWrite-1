
소스수정없이 버전업을하자 - 이게 진정한 객체지향이다.

- 고객들의문제(고객들의도메인을) 프로그래밍으로 풀어나가자

  객체를 찾는연습. - 그리고 메세지(메소드)를 날려본다는생각을해봐라 

---------------------- ppt참고
 
  UML - 실전에서는 이것만 쓴다.
    U  - 유니파이드,통합
    M -  모델링
    L   - 표기법 ,언어

    클래스설계를 위해 씀 
 
         ex) 클래스명 
            -----------
                속성    
            ---------- 
                메소드 
 
 책장- 기능객체라고보면되고 , 책은 데이터객체라고보면됨 , 가지는관계(has a) 
 --
 클래스는 도메인에 제한되어있다. 즉 다른프로젝트에서 재사용? 거의불가능 
  객체지향의 재사용은 이재사용이아님 
  
--------------------------------------
--- 애자일 소프트웨어설계 , 점진적설계---		   
       

 객체 포인터, 생명주기 힙,스택 잘봐라 
-----------------

 추상클래스 - 포유류,음식,자동차 
 
    즉 힙에 객체로 인스턴스화 할수없다. ㅇㅋ? 
    즉 new 포유류() 이걸못함
----------
 상속 - 코드재사용위해사용 50점 
	시스템의 확장     50점  -오버라이드

	고래 extends 포유류 - 포유류를 고래로확장한다.
	
  구현에서는 상속이지만 uml에서는 일반화관계라고한다. 
  일반화관계 : is a 
              개 is a 포유류다.
                   -> 
  추상메소드 abstract - 즉 구현을 상속받는객체가 구현한다. 
   ex) 포유류에서 움직이다라는 메소드를 구현해버리면, 고래랑사람이랑 걷는게다른데 우짬?
       그러니깐 구현하지말고 추상메소드로 만들어 상속받는객체가 만들게함

 즉 부모클래스는 공통적인걸묶어뿐다.


 오버라이드
     +             =    다형성(메소드는똑같은데 기능이다르게작동! 입력에따라)
 오버로드  		즉 자판기의 동전구멍이라고생각해라
 
  로드 - 짐이쌓인다..? 로드가 걸린다?
           즉 메소드를 쌓아놔서 다 쓸수있다.. 그뜻 
 

-------------------
 주차시스템 

 park( 버스 bus ) {
   bus.주차하다() ;                   
 }                                        이렇게하면 안된다 ㅇㅋ ? 
 park( 스포츠카 scar ){ 		자동차타입으로 넣어야한당ㅋ
    scar.주차하다();           
 }
 
------------------

  인터페이스  - 확장성 
                   확장성이 더좋아진다 
 정보은닉,캡슐화
      - 자동차부품을다 몰라도 핸들인터페이스등으로 자동차객체를 조작가능  
 즉 인터페이스는 사용자를위한 기능설명서? 라고보면된다. 

 비행기는 주차할수있지만 자동차를 상속하면 된다?- 아니죠 말이안대
 이럴때 인터페이스를써라

 즉 예를들어 ipark라는 인터페이스를 만들어 자동차가 주차를구현하게하고
 버스나 , 스포츠카등이 자동차를상속받아 실제주차구현을하면되고
  버스를  ipark c = new 버스() ; 
            자동차  c = new 버스(); 이렇게 둘다됨

  비행기는 ipark c = new 비행기() 이렇게하면되겟지
 
------------------------

정리 - 이게다다 자바는

     클래스 - 필드
              - 메서드           중요~
              - 생성자  

      정보은닉(캡슐화)

      상속

      다형성(오버로딩,오버라이딩)

      추상클래스 
    
      인터페이스 
     
      - 생명주기 -  
---------------------------- 
  