
JAVA의 lang 패키지는

* JAVA 프로그래밍에 필요한 가장 기본적인 클래스들이 모여있는 패키지이다. 

 그래서 이클래스들은 import없이 사용가능 ( c의 stdio.h? 이건가 그거같은거지 )

 그래서 Sting 클래스나 System 같은걸 import없이 사용할수있는거다.

 거기서 자주사용하느 클래스몇개알아보자

- Object클래스 최고조상이죠 
    : 멤버변수는없다.
    : 오직 11개의 메서드만 가지고있다. 
       
          equals 내용비교 , ==주소비교 
   즉 객체는 내용을비교해도 주소값이다르니 당연다르다. 오버라이딩해라 
         
          hashcode 메소드 
           해시함수는 찾고자하는 값입력 => 저장위치알려주는 해시코드반환
           쨋든 이것도 오버라이딩해야함 주소값으로 해쉬만들기때문에.. 

         toString 이것도 오버라이드안하면 오브젝트의 toString이출력
                     클래스이름+@ + 해쉬코드16진수 이렇게나옴 

        그런데 String 객체나 Date객체는 이미 오버라이드가되어있어서 쓸모있는 정보가나옴 ㅇㅋ ?

	clone 메소드
 	 자기자신복사=새로운인스턴스생성
	 근데 배열은 객체가 새로복제하면 복제본배열바꾸면 실제에도 영향이간다.
  	그래서 오버라이딩또해야함 
    등등... 

------------------------
 - String 클래스 
 불변객체임  equlas오버라이딩되어있을듯?
  리터럴로 만들면 (new없이) 하나의 인스턴스를참조함 같은문자열이면 ..
 근데 new써서만들면 두개의 객체가생겨서 각각따로 참조함ㅇㅋ ?
 
 근데 intern()이걸쓰면 하나를가리키게만든다 그래서 equals나 ==로도 비교가 가능하게됨 오우

 * String s = "" 이건 new char[0] 이것과 같다. 
 
 

 ----------------

 StringBuffer 클래스 
   string과 다르게 내부적으로 문자열을 변경이가능하다 . 
   크기를고려하여  충분히잡아주는게좋다 .
   String과비슷함 내부적으로 char형 배열의 참조변수를 인스턴스변수로선언함 
  			이걸 즉 저장,편집을위한 공간으로사용함

  이건 toString이 기본으로 오버라이딩되어있어서 
 해준다음에.equals 이걸해주면되겟지 

  
--------------

  Math 클래스 

    수학계산유용, 접근제어자가 private라 인스턴스생성이안됨
   그이유 = 클래스내에 인스턴스변수가하나도없기때문에 생성할필요가없지 
   걍 클래스메소드를쓰는거임 결과만내면되니깐

-------------

  Wrapper클래스 

       기본형 변수를 객체로다루기위한 클래스?  
     8개가있다 . 
    이것도 equals가 오버라이딩되있고 , toString도 오버라이딩되어있다. 
    그밖에 스태틱멤버를 공통적으로가짐 
 -------------

 Number클래스

   숫자와 관련된 Wrapper클래스들의 조상클래스이다. + BigInteger, BigDecimal
      6개					       +2개

     					       큰범위정수, 큰범위 더블 부동소수점처리위해 씀
  
 객체가 가지고있는 값을 기본형으로 변환하여 반환해주는 메소드등을가짐 

-------------------------------------

 입출력 ..
  
 1.1 컴퓨터 내부, 외부장치와 프로그램간의 데이터를 주고받는것을 말한다.
   
 1.2 스트림 - 한쪽에서 어느쪽으로 데이터 전달할려면 연결하고 전송할수있는
                 무언가가 있어야함 그걸 스트림이라함 (통로)
----
 1.3 바이트기반 스트림 , InputStream, OutputStream 
 			의 자식들 file .audio 등등 있다
                               read, write는 추상메서드라 구현해야함
 
 1.4 보조스트림 -  스트링기능을보완, 입출력기능은없다. 
     	           ex ) 스트림생성하고난뒤 입력성능향상위해 
		    보조스트림인 버퍼스트림을 사용
---
 1.5 문자기반 스트림 , Reader, Writer
     위에까진 바이트기반 근데 자바에서 char는 2바이트이기 때문에 
     처리가힘듬 이걸위해 나옴 즉 문자기반일때는 이걸쓰자 
 
    
 

 2.1 바이트기반 스트림 , 추상화객체 메서드 

 2.2 ByteArrayInputStream , ByteArrayOutputStream 
     바이트배열데이터를 입출력 
     
 2.3 FIleInputStream 과 FileOutputStream 
     파일입출력위한스트림 
     텍스트파일다루는경우에는 문자기반스트림을쓰는게 더좋다.
 ----------
 3.1 바이트기반 보조스트림 --
   FilterInputStream / FilterOutputStream 
       모든 inputStream/OutputStream의 자손이면서 모든 보조스트림의 조상임 
       그래서 이것들의 모든메소드는 주스트림 메서드를 그대로호출함  즉 이거 자체로는 아무런일도안함
       즉 상속을 통해서 원하는 작업을 수행하도록 읽고쓰는 메서드를 오버라이딩해야함 

 3.2 BufferedInputStream / BufferedOutputStream  
    -입출력효율을 높히기 위해 버퍼를 사용하는 보조스트림임  대부분사용함 
     왜? 한바이트씩보다는 버퍼(바이트배열)을이용하여 한번에 입출력하는게빨라서 쓰는 보조스트림이다.

 3.3 DataInputStream / DataOutputStream 
      byte단위가 아니라 8가지 기본자료형단위로 읽고쓴다. 
      출력시 기본자료형 값을 16진수로 표현하여 저장, int값이면 4바이트의 16진수로 출력 

 3.4 SequenceInputStream
     여러개의 입력스트림을 연속적으로 연결 -> 하나의 스트림으로부터 데이터를 읽는것과 마찬가지로해줌
    큰파일을 나누었다가 합칠때 유용.

 3.5 PrintStream 
      데이터를 적절한 문자로출력 (문자기반 스트림역할을 수행하게된다. )
     그래서 jdk1.1부터 진짜 문자기반스트림인 PrintWriter가 추가됨 
     근데 하도많이 쓰던 System.out이 PrintStream 기반이니깐 둘다쓰게됨 
     가능하면 PrintWriter를 써라

-----
  4.1 문자기반 스트림  ----
       Reader / Writer  이것도 추상화객체임 즉 모든 문자기반스트림 조상
       대신 바이트말고 char배열사용한다는것 
 
 4.2 FileReader / FileWriter 
      파일 읽고쓰는거, 사용방법은     FilterInputStream / FilterOutputStream 랑 동일 

 4.3 PipedReader / PipedWriter 
      쓰레드간에 데이터 주고받을때사용
     입력 출력스트림을 하나의 스트림으로 연결해서쓴다. 
   즉 어느 한쪽스레드에서 close하면 나머지도 다닫힘    

 4.4 StringReader / StringWriter 
      입출력대상이 메모리인 스트림 , 
     출력되는 데이터는 내부의 스트링버퍼에저장됨 이걸 꺼낼려면 getBuffer, toString 쓰면됨 
  
 5.1 문자기반 보조스트림 ---
   BufferdReader /BufferedWriter   
   이것도 버퍼를이용해서 입출력 효율높인다. 대표적으로 readLine을 사용하면 라인단위로 읽어옴 
 
 5.2 InputStreamReader/ outputStreamWriter 
    바이트기반 스트림을 문자기반스트림으로 연결해줌 그리고 바이트기반 스트림의 데이터를 
    지정된 인코딩의 문자데이터로 변환 
   바이트로 읽어서 -> char로 바꿔줌 //즉 utf말고 다른것들 ms949 이런거할떄 이걸써야겠지

   ex ) file(소스) <-> fileInputStream <-> InputStreamReader <->  char로바꿈   <->  BufferdReader 
          ->                  ->                      ->                                 
                             주                        보조                         		보조 

  ex )  키보드 <-> system.in <->   InputStreamReader <-> BufferdReader 
		 주                   보조                            보조 

  ex ) 
 	 소켓(							소켓(
     		버퍼 = 소켓 인풋스트림    =             인터넷             = 아웃풋스트림 = 버퍼          
     		버퍼 = 소켓 아웃풋스트림 =  		         = 인풋스트림    = 버퍼
   	      )                                                                          )

  
--------
 
 6 . 표준입출력 file 
   System.in , out , err 
          입      출    출  
  자바실행시 사용가능 즉 미리빨떄꼽아놈

  
 System. SetOut, setErr, SetIn
  콘솔이외의 출력

 6.3. RandomAccessFile 
     이건 입출력모두가능 
    장점 : 포인터를이용해서 파일에 읽고쓰는 위치가자유롭다.

 6.4 File
   자바는 파일 클래스를 통해서 파일과 디렉토리를 다룬다 
   그래서 File인스턴스는 파일일수도있고 디렉토리일수도있다.

-----
 7.직렬화 
  
  객체를 컴퓨터에 저장 - > 나중에 다시꺼내쓴다.
  컴퓨터 와 컴퓨터간에 객체를주고받는다.
  
  이걸가능하게해줌 
 
  직렬화 = 객체를 데이터 스트림으로 만드는것 
 
  즉 객체를 스트림에 쓰기위해 연속적인 데이터로 변환시키는것임 
   
  이걸 가능하게해주는 
  ObjectInputStream(직렬화), ObjectOutputStream(역직렬화) 
  걍 이거 사용법알아서 쓰면됨
  
 7.3 Serializable 

 직렬화가능클래스만드는것  -  Serializable 인터페이스 구현 
   
      transient 제한하는것    
  
  
 
       
                  
            	        
    	
 		